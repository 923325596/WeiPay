__d(function (global, _require, module, exports, _dependencyMap) {
    var BN = _require(_dependencyMap[0], 'bn.js');

    var convert = _require(_dependencyMap[1], './convert');

    var throwError = _require(_dependencyMap[2], './throw-error');

    var keccak256 = _require(_dependencyMap[3], './keccak256');

    function getChecksumAddress(address) {
        if (typeof address !== 'string' || !address.match(/^0x[0-9A-Fa-f]{40}$/)) {
            throwError('invalid address', {
                input: address
            });
        }

        address = address.toLowerCase();
        var hashed = address.substring(2).split('');

        for (var i = 0; i < hashed.length; i++) {
            hashed[i] = hashed[i].charCodeAt(0);
        }

        hashed = convert.arrayify(keccak256(hashed));
        address = address.substring(2).split('');

        for (var i = 0; i < 40; i += 2) {
            if (hashed[i >> 1] >> 4 >= 8) {
                address[i] = address[i].toUpperCase();
            }

            if ((hashed[i >> 1] & 0x0f) >= 8) {
                address[i + 1] = address[i + 1].toUpperCase();
            }
        }

        return '0x' + address.join('');
    }

    var MAX_SAFE_INTEGER = 0x1fffffffffffff;

    function log10(x) {
        if (Math.log10) {
            return Math.log10(x);
        }

        return Math.log(x) / Math.LN10;
    }

    var ibanChecksum = function () {
        var ibanLookup = {};

        for (var i = 0; i < 10; i++) {
            ibanLookup[String(i)] = String(i);
        }

        for (var i = 0; i < 26; i++) {
            ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
        }

        var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));
        return function (address) {
            address = address.toUpperCase();
            address = address.substring(4) + address.substring(0, 2) + '00';
            var expanded = address.split('');

            for (var i = 0; i < expanded.length; i++) {
                expanded[i] = ibanLookup[expanded[i]];
            }

            expanded = expanded.join('');

            while (expanded.length >= safeDigits) {
                var block = expanded.substring(0, safeDigits);
                expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
            }

            var checksum = String(98 - parseInt(expanded, 10) % 97);

            while (checksum.length < 2) {
                checksum = '0' + checksum;
            }

            return checksum;
        };
    }();

    function getAddress(address, icapFormat) {
        var result = null;

        if (typeof address !== 'string') {
            throwError('invalid address', {
                input: address
            });
        }

        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            if (address.substring(0, 2) !== '0x') {
                address = '0x' + address;
            }

            result = getChecksumAddress(address);

            if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
                throwError('invalid address checksum', {
                    input: address,
                    expected: result
                });
            }
        } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            if (address.substring(2, 4) !== ibanChecksum(address)) {
                throwError('invalid address icap checksum', {
                    input: address
                });
            }

            result = new BN(address.substring(4), 36).toString(16);

            while (result.length < 40) {
                result = '0' + result;
            }

            result = getChecksumAddress('0x' + result);
        } else {
            throwError('invalid address', {
                input: address
            });
        }

        if (icapFormat) {
            var base36 = new BN(result.substring(2), 16).toString(36).toUpperCase();

            while (base36.length < 30) {
                base36 = '0' + base36;
            }

            return 'XE' + ibanChecksum('XE00' + base36) + base36;
        }

        return result;
    }

    module.exports = {
        getAddress: getAddress
    };
});