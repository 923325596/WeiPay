__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../../node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/home/master/Documents/work/WeiPay/src/components/contacts/AddContactList.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _reactRedux = _require(_dependencyMap[3], "react-redux");

  var _reactNativeElements = _require(_dependencyMap[4], "react-native-elements");

  var _lodash = _require(_dependencyMap[5], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _CardSection = _require(_dependencyMap[6], "../common/CardSection");

  var _Card = _require(_dependencyMap[7], "../common/Card");

  var _ActionCreator = _require(_dependencyMap[8], "../../actions/ActionCreator");

  var _ActionCreator2 = _interopRequireDefault(_ActionCreator);

  var _ActionCreator3 = _require(_dependencyMap[9], "../../actions/ActionCreator.js");

  var actions = _interopRequireWildcard(_ActionCreator3);

  var _AddContactListItem = _require(_dependencyMap[10], "./AddContactListItem");

  var _AddContactListItem2 = _interopRequireDefault(_AddContactListItem);

  var _reactNavigation = _require(_dependencyMap[11], "react-navigation");

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    AddContactList: {
      displayName: "AddContactList"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/master/Documents/work/WeiPay/src/components/contacts/AddContactList.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var AddContactList = _wrapComponent("AddContactList")(function (_Component) {
    _inherits(AddContactList, _Component);

    function AddContactList(props) {
      _classCallCheck(this, AddContactList);

      var _this = _possibleConstructorReturn(this, (AddContactList.__proto__ || Object.getPrototypeOf(AddContactList)).call(this, props));

      _this.renderAddressInputs = function () {
        return _this.props.tokens.map(function (coin) {
          return _react3.default.createElement(
            _reactNative.View,
            {
              style: styles.componentStyle,
              key: coin.title,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 74
              }
            },
            _react3.default.createElement(
              _CardSection.CardSection,
              {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 75
                }
              },
              _react3.default.createElement(
                _reactNative.View,
                {
                  style: styles.section,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 76
                  }
                },
                _react3.default.createElement(
                  _reactNative.Text,
                  {
                    style: styles.title,
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 77
                    }
                  },
                  coin.title,
                  " 's Address"
                ),
                _react3.default.createElement(
                  _Card.Card,
                  {
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 78
                    }
                  },
                  _react3.default.createElement(
                    _reactNative.View,
                    {
                      style: styles.card,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 79
                      }
                    },
                    _react3.default.createElement(_reactNativeElements.Button, {
                      title: "QR",
                      onPress: function onPress() {
                        return _this.navigateToQRScanner(coin.title);
                      },
                      style: styles.qrButton,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 80
                      }
                    }),
                    _react3.default.createElement(_reactNative.TextInput, {
                      placeholder: "Enter or Paste Address here",
                      onChangeText: function onChangeText(text) {
                        return _this.props.renderAddress(text, coin.title, coin);
                      },
                      ref: function ref(_ref) {
                        return _this.props.contactAddress = _ref;
                      },
                      value: _this.props.contactAddress[coin.title],
                      style: styles.addressInput,
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 85
                      }
                    })
                  )
                )
              )
            )
          );
        });
      };

      var ds = new _reactNative.ListView.DataSource({
        rowHasChanged: function rowHasChanged(r1, r2) {
          return r1 !== r2;
        }
      });
      _this.state = {
        name: "",
        nameValue: "",
        coinValue: "",
        dataSource: ds.cloneWithRows(_this.props.tokens)
      };
      return _this;
    }

    _createClass(AddContactList, [{
      key: "listItem",
      value: function listItem(token) {
        return _react3.default.createElement(_reactNativeElements.ListItem, {
          title: "Enter Address",
          textInput: true,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 46
          }
        });
      }
    }, {
      key: "navigateToQRScanner",
      value: function navigateToQRScanner(coinName) {
        var data = {
          coinName: coinName,
          contactName: this.props.contactName,
          allAddressInputs: this.props.contactAddress
        };
        this.props.qrScannerInvoker("addContact");
        this.props.saveAddContactInputs(data);
        this.props.navigate("QCodeScanner", data);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return _react3.default.createElement(
          _reactNative.View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 108
            }
          },
          _react3.default.createElement(_reactNative.TextInput, {
            textAlign: 'center',
            placeholder: "Enter Contact Name",
            style: styles.nameInputStyle,
            onChangeText: function onChangeText(text) {
              return _this2.props.renderName(text);
            },
            value: this.props.contactName,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 109
            }
          }),
          _react3.default.createElement(
            _reactNative.View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 116
              }
            },
            this.renderAddressInputs()
          )
        );
      }
    }]);

    return AddContactList;
  }(_react2.Component));

  var styles = _reactNative.StyleSheet.create({
    nameInputStyle: {
      paddingTop: 10,
      paddingLeft: 2,
      paddingRight: 2,
      paddingBottom: 10,
      fontWeight: 'bold',
      backgroundColor: 'red',
      fontSize: 18,
      width: '100 %',
      backgroundColor: 'white'
    },
    qrButton: {
      width: 50,
      height: 50,
      backgroundColor: "yellow"
    },
    addressInput: {
      width: 150,
      marginLeft: 0
    },
    card: {
      flexDirection: 'row',
      paddingLeft: 5,
      paddingTop: 7,
      paddingBottom: 7
    },
    title: {
      fontWeight: "bold",
      fontSize: 15,
      color: "black",
      textShadowRadius: 3,
      paddingLeft: 5
    },
    section: {
      flex: 1,
      flexDirection: 'column'
    }
  });

  var mapStateToProps = function mapStateToProps(_ref2) {
    var newWallet = _ref2.newWallet,
        contacts = _ref2.contacts;
    return {
      tokens: newWallet.tokens,
      currentContact: contacts.currentContact,
      current: contacts.currentContact
    };
  };

  exports.default = (0, _reactRedux.connect)(mapStateToProps, {
    qrScannerInvoker: _ActionCreator.qrScannerInvoker,
    saveAddContactInputs: _ActionCreator.saveAddContactInputs
  })(AddContactList);
});