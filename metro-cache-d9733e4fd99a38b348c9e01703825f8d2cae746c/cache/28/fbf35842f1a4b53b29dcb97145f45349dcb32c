__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });
    exports.requestPermissions = undefined;

    var _this = this;

    var _reactNative = _require(_dependencyMap[0], "react-native");

    var requestPermissions = exports.requestPermissions = function requestPermissions(hasVideoAndAudio, CameraManager, permissionDialogTitle, permissionDialogMessage) {
        var check, params, granted, grantedAudio;
        return regeneratorRuntime.async(function requestPermissions$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        if (!(_reactNative.Platform.OS === 'ios')) {
                            _context.next = 8;
                            break;
                        }

                        check = hasVideoAndAudio ? CameraManager.checkDeviceAuthorizationStatus : CameraManager.checkVideoAuthorizationStatus;

                        if (!check) {
                            _context.next = 6;
                            break;
                        }

                        _context.next = 5;
                        return regeneratorRuntime.awrap(check());

                    case 5:
                        return _context.abrupt("return", _context.sent);

                    case 6:
                        _context.next = 20;
                        break;

                    case 8:
                        if (!(_reactNative.Platform.OS === 'android')) {
                            _context.next = 20;
                            break;
                        }

                        params = undefined;
                        if (permissionDialogTitle || permissionDialogMessage) params = {
                            title: permissionDialogTitle,
                            message: permissionDialogMessage
                        };
                        _context.next = 13;
                        return regeneratorRuntime.awrap(_reactNative.PermissionsAndroid.request(_reactNative.PermissionsAndroid.PERMISSIONS.CAMERA, params));

                    case 13:
                        granted = _context.sent;

                        if (hasVideoAndAudio) {
                            _context.next = 16;
                            break;
                        }

                        return _context.abrupt("return", granted === _reactNative.PermissionsAndroid.RESULTS.GRANTED || granted === true);

                    case 16:
                        _context.next = 18;
                        return regeneratorRuntime.awrap(_reactNative.PermissionsAndroid.request(_reactNative.PermissionsAndroid.PERMISSIONS.RECORD_AUDIO, params));

                    case 18:
                        grantedAudio = _context.sent;
                        return _context.abrupt("return", (granted === _reactNative.PermissionsAndroid.RESULTS.GRANTED || granted === true) && (grantedAudio === _reactNative.PermissionsAndroid.RESULTS.GRANTED || grantedAudio === true));

                    case 20:
                        return _context.abrupt("return", true);

                    case 21:
                    case "end":
                        return _context.stop();
                }
            }
        }, null, _this);
    };
});