__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    var aes = _require(_dependencyMap[0], 'aes-js');

    var scrypt = _require(_dependencyMap[1], 'scrypt-js');

    var uuid = _require(_dependencyMap[2], 'uuid');

    var hmac = _require(_dependencyMap[3], '../utils/hmac');

    var pbkdf2 = _require(_dependencyMap[4], '../utils/pbkdf2');

    var utils = _require(_dependencyMap[5], '../utils');

    var SigningKey = _require(_dependencyMap[6], './signing-key');

    var HDNode = _require(_dependencyMap[7], './hdnode');

    var defaultPath = "m/44'/60'/0'/0/0";

    function arrayify(hexString) {
        if (typeof hexString === 'string' && hexString.substring(0, 2) !== '0x') {
            hexString = '0x' + hexString;
        }

        return utils.arrayify(hexString);
    }

    function zpad(value, length) {
        value = String(value);

        while (value.length < length) {
            value = '0' + value;
        }

        return value;
    }

    function getPassword(password) {
        if (typeof password === 'string') {
            return utils.toUtf8Bytes(password, 'NFKC');
        }

        return utils.arrayify(password, 'password');
    }

    function searchPath(object, path) {
        var currentChild = object;
        var comps = path.toLowerCase().split('/');

        for (var i = 0; i < comps.length; i++) {
            var matchingChild = null;

            for (var key in currentChild) {
                if (key.toLowerCase() === comps[i]) {
                    matchingChild = currentChild[key];
                    break;
                }
            }

            if (matchingChild === null) {
                return null;
            }

            currentChild = matchingChild;
        }

        return currentChild;
    }

    var secretStorage = {};
    utils.defineProperty(secretStorage, 'isCrowdsaleWallet', function (json) {
        try {
            var data = JSON.parse(json);
        } catch (error) {
            return false;
        }

        return data.encseed && data.ethaddr;
    });
    utils.defineProperty(secretStorage, 'isValidWallet', function (json) {
        try {
            var data = JSON.parse(json);
        } catch (error) {
            return false;
        }

        if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
            return false;
        }

        return true;
    });
    utils.defineProperty(secretStorage, 'decryptCrowdsale', function (json, password) {
        var data = JSON.parse(json);
        password = getPassword(password);
        var ethaddr = utils.getAddress(searchPath(data, 'ethaddr'));
        var encseed = arrayify(searchPath(data, 'encseed'));

        if (!encseed || encseed.length % 16 !== 0) {
            throw new Error('invalid encseed');
        }

        var key = pbkdf2(password, password, 2000, 32, hmac.createSha256Hmac).slice(0, 16);
        var iv = encseed.slice(0, 16);
        var encryptedSeed = encseed.slice(16);
        var aesCbc = new aes.ModeOfOperation.cbc(key, iv);
        var seed = utils.arrayify(aesCbc.decrypt(encryptedSeed));
        seed = aes.padding.pkcs7.strip(seed);
        var seedHex = '';

        for (var i = 0; i < seed.length; i++) {
            seedHex += String.fromCharCode(seed[i]);
        }

        var seedHexBytes = utils.toUtf8Bytes(seedHex);
        var signingKey = new SigningKey(utils.keccak256(seedHexBytes));

        if (signingKey.address !== ethaddr) {
            throw new Error('corrupt crowdsale wallet');
        }

        return signingKey;
    });
    utils.defineProperty(secretStorage, 'decrypt', function (json, password, progressCallback) {
        var data = JSON.parse(json);
        password = getPassword(password);

        var decrypt = function decrypt(key, ciphertext) {
            var cipher = searchPath(data, 'crypto/cipher');

            if (cipher === 'aes-128-ctr') {
                var iv = arrayify(searchPath(data, 'crypto/cipherparams/iv'), 'crypto/cipherparams/iv');
                var counter = new aes.Counter(iv);
                var aesCtr = new aes.ModeOfOperation.ctr(key, counter);
                return arrayify(aesCtr.decrypt(ciphertext));
            }

            return null;
        };

        var computeMAC = function computeMAC(derivedHalf, ciphertext) {
            return utils.keccak256(utils.concat([derivedHalf, ciphertext]));
        };

        var getSigningKey = function getSigningKey(key, reject) {
            var ciphertext = arrayify(searchPath(data, 'crypto/ciphertext'));
            var computedMAC = utils.hexlify(computeMAC(key.slice(16, 32), ciphertext)).substring(2);

            if (computedMAC !== searchPath(data, 'crypto/mac').toLowerCase()) {
                reject(new Error('invalid password'));
                return null;
            }

            var privateKey = decrypt(key.slice(0, 16), ciphertext);
            var mnemonicKey = key.slice(32, 64);

            if (!privateKey) {
                reject(new Error('unsupported cipher'));
                return null;
            }

            var signingKey = new SigningKey(privateKey);

            if (signingKey.address !== utils.getAddress(data.address)) {
                reject(new Error('address mismatch'));
                return null;
            }

            if (searchPath(data, 'x-ethers/version') === '0.1') {
                var mnemonicCiphertext = arrayify(searchPath(data, 'x-ethers/mnemonicCiphertext'), 'x-ethers/mnemonicCiphertext');
                var mnemonicIv = arrayify(searchPath(data, 'x-ethers/mnemonicCounter'), 'x-ethers/mnemonicCounter');
                var mnemonicCounter = new aes.Counter(mnemonicIv);
                var mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
                var path = searchPath(data, 'x-ethers/path') || defaultPath;
                var entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
                var mnemonic = HDNode.entropyToMnemonic(entropy);

                if (HDNode.fromMnemonic(mnemonic).derivePath(path).privateKey != utils.hexlify(privateKey)) {
                    reject(new Error('mnemonic mismatch'));
                    return null;
                }

                signingKey.mnemonic = mnemonic;
                signingKey.path = path;
            }

            return signingKey;
        };

        return new Promise(function (resolve, reject) {
            var kdf = searchPath(data, 'crypto/kdf');

            if (kdf && typeof kdf === 'string') {
                if (kdf.toLowerCase() === 'scrypt') {
                    var salt = arrayify(searchPath(data, 'crypto/kdfparams/salt'), 'crypto/kdfparams/salt');
                    var N = parseInt(searchPath(data, 'crypto/kdfparams/n'));
                    var r = parseInt(searchPath(data, 'crypto/kdfparams/r'));
                    var p = parseInt(searchPath(data, 'crypto/kdfparams/p'));

                    if (!N || !r || !p) {
                        reject(new Error('unsupported key-derivation function parameters'));
                        return;
                    }

                    if ((N & N - 1) !== 0) {
                        reject(new Error('unsupported key-derivation function parameter value for N'));
                        return;
                    }

                    var dkLen = parseInt(searchPath(data, 'crypto/kdfparams/dklen'));

                    if (dkLen !== 32) {
                        reject(new Error('unsupported key-derivation derived-key length'));
                        return;
                    }

                    scrypt(password, salt, N, r, p, 64, function (error, progress, key) {
                        if (error) {
                            error.progress = progress;
                            reject(error);
                        } else if (key) {
                            key = arrayify(key);
                            var signingKey = getSigningKey(key, reject);

                            if (!signingKey) {
                                return;
                            }

                            if (progressCallback) {
                                progressCallback(1);
                            }

                            resolve(signingKey);
                        } else if (progressCallback) {
                            return progressCallback(progress);
                        }
                    });
                } else if (kdf.toLowerCase() === 'pbkdf2') {
                    var salt = arrayify(searchPath(data, 'crypto/kdfparams/salt'), 'crypto/kdfparams/salt');
                    var prfFunc = null;
                    var prf = searchPath(data, 'crypto/kdfparams/prf');

                    if (prf === 'hmac-sha256') {
                        prfFunc = hmac.createSha256Hmac;
                    } else if (prf === 'hmac-sha512') {
                        prfFunc = hmac.createSha512Hmac;
                    } else {
                        reject(new Error('unsupported prf'));
                        return;
                    }

                    var c = parseInt(searchPath(data, 'crypto/kdfparams/c'));
                    var dkLen = parseInt(searchPath(data, 'crypto/kdfparams/dklen'));

                    if (dkLen !== 32) {
                        reject(new Error('unsupported key-derivation derived-key length'));
                        return;
                    }

                    var key = pbkdf2(password, salt, c, dkLen, prfFunc);
                    var signingKey = getSigningKey(key, reject);

                    if (!signingKey) {
                        return;
                    }

                    resolve(signingKey);
                } else {
                    reject(new Error('unsupported key-derivation function'));
                }
            } else {
                reject(new Error('unsupported key-derivation function'));
            }
        });
    });
    utils.defineProperty(secretStorage, 'encrypt', function (privateKey, password, options, progressCallback) {
        if (typeof options === 'function' && !progressCallback) {
            progressCallback = options;
            options = {};
        }

        if (!options) {
            options = {};
        }

        if (privateKey instanceof SigningKey) {
            privateKey = privateKey.privateKey;
        }

        privateKey = arrayify(privateKey, 'private key');

        if (privateKey.length !== 32) {
            throw new Error('invalid private key');
        }

        password = getPassword(password);
        var entropy = options.entropy;

        if (options.mnemonic) {
            if (entropy) {
                if (HDNode.entropyToMnemonic(entropy) !== options.mnemonic) {
                    throw new Error('entropy and mnemonic mismatch');
                }
            } else {
                entropy = HDNode.mnemonicToEntropy(options.mnemonic);
            }
        }

        if (entropy) {
            entropy = arrayify(entropy, 'entropy');
        }

        var path = options.path;

        if (entropy && !path) {
            path = defaultPath;
        }

        var client = options.client;

        if (!client) {
            client = "ethers.js";
        }

        var salt = options.salt;

        if (salt) {
            salt = arrayify(salt, 'salt');
        } else {
            salt = utils.randomBytes(32);
            ;
        }

        var iv = null;

        if (options.iv) {
            iv = arrayify(options.iv, 'iv');

            if (iv.length !== 16) {
                throw new Error('invalid iv');
            }
        } else {
            iv = utils.randomBytes(16);
        }

        var uuidRandom = options.uuid;

        if (uuidRandom) {
            uuidRandom = arrayify(uuidRandom, 'uuid');

            if (uuidRandom.length !== 16) {
                throw new Error('invalid uuid');
            }
        } else {
            uuidRandom = utils.randomBytes(16);
        }

        var N = 1 << 17,
            r = 8,
            p = 1;

        if (options.scrypt) {
            if (options.scrypt.N) {
                N = options.scrypt.N;
            }

            if (options.scrypt.r) {
                r = options.scrypt.r;
            }

            if (options.scrypt.p) {
                p = options.scrypt.p;
            }
        }

        return new Promise(function (resolve, reject) {
            scrypt(password, salt, N, r, p, 64, function (error, progress, key) {
                if (error) {
                    error.progress = progress;
                    reject(error);
                } else if (key) {
                    key = arrayify(key);
                    var derivedKey = key.slice(0, 16);
                    var macPrefix = key.slice(16, 32);
                    var mnemonicKey = key.slice(32, 64);
                    var address = new SigningKey(privateKey).address;
                    var counter = new aes.Counter(iv);
                    var aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter);
                    var ciphertext = utils.arrayify(aesCtr.encrypt(privateKey));
                    var mac = utils.keccak256(utils.concat([macPrefix, ciphertext]));
                    var data = {
                        address: address.substring(2).toLowerCase(),
                        id: uuid.v4({
                            random: uuidRandom
                        }),
                        version: 3,
                        Crypto: {
                            cipher: 'aes-128-ctr',
                            cipherparams: {
                                iv: utils.hexlify(iv).substring(2)
                            },
                            ciphertext: utils.hexlify(ciphertext).substring(2),
                            kdf: 'scrypt',
                            kdfparams: {
                                salt: utils.hexlify(salt).substring(2),
                                n: N,
                                dklen: 32,
                                p: p,
                                r: r
                            },
                            mac: mac.substring(2)
                        }
                    };

                    if (entropy) {
                        var mnemonicIv = utils.randomBytes(16);
                        var mnemonicCounter = new aes.Counter(mnemonicIv);
                        var mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
                        var mnemonicCiphertext = utils.arrayify(mnemonicAesCtr.encrypt(entropy));
                        var now = new Date();
                        var timestamp = now.getUTCFullYear() + '-' + zpad(now.getUTCMonth() + 1, 2) + '-' + zpad(now.getUTCDate(), 2) + 'T' + zpad(now.getUTCHours(), 2) + '-' + zpad(now.getUTCMinutes(), 2) + '-' + zpad(now.getUTCSeconds(), 2) + '.0Z';
                        data['x-ethers'] = {
                            client: client,
                            gethFilename: 'UTC--' + timestamp + '--' + data.address,
                            mnemonicCounter: utils.hexlify(mnemonicIv).substring(2),
                            mnemonicCiphertext: utils.hexlify(mnemonicCiphertext).substring(2),
                            version: "0.1"
                        };
                    }

                    if (progressCallback) {
                        progressCallback(1);
                    }

                    resolve(JSON.stringify(data));
                } else if (progressCallback) {
                    return progressCallback(progress);
                }
            });
        });
    });
    module.exports = secretStorage;
});