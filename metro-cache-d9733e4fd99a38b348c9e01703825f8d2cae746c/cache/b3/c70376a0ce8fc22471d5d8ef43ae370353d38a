__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addTokenToSetup = addTokenToSetup;
  exports.newWalletCreation = newWalletCreation;
  exports.newWalletNameEntry = newWalletNameEntry;
  exports.restoreWallet = restoreWallet;
  exports.selectWalletCurrency = selectWalletCurrency;
  exports.selectWalletLanguage = selectWalletLanguage;
  exports.addingContact = addingContact;
  exports.saveDataForCoinSend = saveDataForCoinSend;
  exports.completeContact = completeContact;
  exports.saveAddContactInputs = saveAddContactInputs;
  exports.updateSavedContactInputs = updateSavedContactInputs;
  exports.editContact = editContact;
  exports.contactsActiveTab = contactsActiveTab;
  exports.getQRCodeData = getQRCodeData;
  exports.qrScannerInvoker = qrScannerInvoker;
  exports.qrScannerCoinInvoker = qrScannerCoinInvoker;
  exports.addTokenInfo = addTokenInfo;
  exports.enterDebug = enterDebug;
  exports.updateTokenBalance = updateTokenBalance;
  exports.updateTxnFee = updateTxnFee;
  exports.updateNewTokenAddress = updateNewTokenAddress;
  exports.updateNewTokenName = updateNewTokenName;
  exports.completeNewToken = completeNewToken;
  exports.addTokenFromList = addTokenFromList;

  var _ActionTypes = _require(_dependencyMap[0], "./ActionTypes");

  var actionTypes = _interopRequireWildcard(_ActionTypes);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function addTokenToSetup(coin) {
    return function (dispatch) {
      coin.selected = !coin.selected;
      dispatch({
        type: actionTypes.ADD_TOKEN_SETUP,
        payload: coin
      });
    };
  }

  function newWalletCreation(wallet) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.CREATING_NEW_WALLET,
        payload: wallet
      });
    };
  }

  function newWalletNameEntry(name) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.NEW_WALLET_NAME,
        payload: name
      });
    };
  }

  function restoreWallet() {
    return function (dispatch) {
      dispatch({
        type: actionTypes.RESTORE_WALLET
      });
    };
  }

  function selectWalletCurrency(currency) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.SELECT_WALLET_CURRENCY,
        payload: currency
      });
    };
  }

  function selectWalletLanguage(language) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.SELECT_WALLET_LANGUAGE,
        payload: language
      });
    };
  }

  function addingContact(contact) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.ADDING_CONTACT,
        payload: contact
      });
    };
  }

  function saveDataForCoinSend(contact) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.CONTACT_ADDRESS_TO_COINSEND,
        payload: contact
      });
    };
  }

  function completeContact(contactName, contactAddress, images) {
    var contact = {};
    contact.name = contactName;
    contact.contactAddress = contactAddress;
    contact.images = images;
    return function (dispatch) {
      dispatch({
        type: actionTypes.COMPLETE_CONTACT,
        payload: contact
      });
    };
  }

  function saveAddContactInputs(contactName, contactAddress, images) {
    var contact = {};
    contact.name = contactName;
    contact.contactAddress = contactAddress;
    contact.images = images;
    return function (dispatch) {
      dispatch({
        type: actionTypes.SAVING_ADDCONTACT_INPUTS,
        payload: contact
      });
    };
  }

  function updateSavedContactInputs(newInfo) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.UPDATE_SAVED_CONTACT_INPUTS,
        payload: newInfo
      });
    };
  }

  function editContact(contactName, contactAddress) {
    var contact = {};
    contact.name = contactName;
    contact.contactAddress = contactAddress;
    return function (dispatch) {
      dispatch({
        type: actionTypes.EDIT_CONTACT,
        payload: contact
      });
    };
  }

  function contactsActiveTab(tabName) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.ACTIVE_CONTACT_TAB,
        payload: tabName
      });
    };
  }

  function getQRCodeData(data) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.QRSCANNER_DATA,
        payload: data
      });
    };
  }

  function qrScannerInvoker(pageName) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.QRSCANNER_PAGE_INVOKER,
        payload: pageName
      });
    };
  }

  function qrScannerCoinInvoker(coinName) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.QRSCANNER_COIN_INVOKER,
        payload: coinName
      });
    };
  }

  function addTokenInfo(tokenInfo) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.ADD_TOKEN_INFO,
        payload: tokenInfo
      });
    };
  }

  function enterDebug() {
    return function (dispatch) {
      dispatch({
        type: actionTypes.DEBUG_MODE,
        payload: ''
      });
    };
  }

  function updateTokenBalance(tokenID, balance) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.UPDATE_TOKEN_BALANCE,
        payload: {
          tokenID: tokenID,
          balance: balance
        }
      });
    };
  }

  function updateTxnFee(fee) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.TXN_FEE,
        payload: fee
      });
    };
  }

  function updateNewTokenAddress(address) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.ADD_NEW_TOKEN_ADDRESS,
        payload: address
      });
    };
  }

  function updateNewTokenName(name) {
    return function (dispatch) {
      dispatch({
        type: actionTypes.ADD_NEW_TOKEN_NAME,
        payload: name
      });
    };
  }

  function completeNewToken() {
    return function (dispatch) {
      dispatch({
        type: actionTypes.COMPLETE_NEW_TOKEN,
        payload: ''
      });
    };
  }

  function addTokenFromList(tokenname, tokenAdd) {
    var loads = {
      "name": tokenname,
      "add": tokenAdd
    };
    return function (dispatch) {
      dispatch({
        type: actionTypes.ADD_TOKEN_FROM_LIST,
        payload: loads
      });
    };
  }
});