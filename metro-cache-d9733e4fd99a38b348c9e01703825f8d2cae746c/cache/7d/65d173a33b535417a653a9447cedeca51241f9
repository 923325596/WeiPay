__d(function (global, _require, module, exports, _dependencyMap) {
    'use strict';

    var Provider = _require(_dependencyMap[0], './provider');

    var JsonRpcProvider = _require(_dependencyMap[1], './json-rpc-provider');

    var utils = function () {
        return {
            defineProperty: _require(_dependencyMap[2], '../utils/properties').defineProperty
        };
    }();

    var errors = _require(_dependencyMap[3], '../utils/errors');

    function Web3Provider(web3Provider, network) {
        errors.checkNew(this, Web3Provider);
        var url = web3Provider.host || web3Provider.path || 'unknown';

        if (network == null) {
            network = 'homestead';
        }

        JsonRpcProvider.call(this, url, network);
        utils.defineProperty(this, '_web3Provider', web3Provider);
    }

    JsonRpcProvider.inherits(Web3Provider);
    utils.defineProperty(Web3Provider.prototype, 'send', function (method, params) {
        if (method == 'eth_sign' && this._web3Provider.isMetaMask) {
            method = 'personal_sign';
            params = [params[1], params[0]];
        }

        var provider = this._web3Provider;
        return new Promise(function (resolve, reject) {
            var request = {
                method: method,
                params: params,
                id: 42,
                jsonrpc: "2.0"
            };
            provider.sendAsync(request, function (error, result) {
                if (error) {
                    reject(error);
                    return;
                }

                if (result.error) {
                    var error = new Error(result.error.message);
                    error.code = result.error.code;
                    error.data = result.error.data;
                    reject(error);
                    return;
                }

                resolve(result.result);
            });
        });
    });
    module.exports = Web3Provider;
});