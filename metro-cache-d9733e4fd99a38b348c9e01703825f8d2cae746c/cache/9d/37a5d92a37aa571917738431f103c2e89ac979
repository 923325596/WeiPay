__d(function (global, _require, module, exports, _dependencyMap) {
    Object.defineProperty(exports, "__esModule", {
        value: true
    });

    var _react2 = _require(_dependencyMap[0], "react");

    var _react3 = _interopRequireDefault(_react2);

    var _index = _require(_dependencyMap[1], "./../../../node_modules/react-transform-hmr/lib/index.js");

    var _index2 = _interopRequireDefault(_index);

    var _jsxFileName = "/home/master/Documents/work/WeiPay/src/components/customPageNavs/ContactTabNavigator.js";

    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

    var _reactNative = _require(_dependencyMap[2], "react-native");

    var _reactNavigation = _require(_dependencyMap[3], "react-navigation");

    var _reactNativeResponsiveFontsize = _require(_dependencyMap[4], "react-native-responsive-fontsize");

    var _reactNativeResponsiveFontsize2 = _interopRequireDefault(_reactNativeResponsiveFontsize);

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

    function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

    var _components = {
        CoinSendTabNavigator: {
            displayName: "CoinSendTabNavigator"
        }
    };

    var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
        filename: "/home/master/Documents/work/WeiPay/src/components/customPageNavs/ContactTabNavigator.js",
        components: _components,
        locals: [module],
        imports: [_react3.default]
    });

    function _wrapComponent(id) {
        return function (Component) {
            return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
        };
    }

    var CoinSendTabNavigator = _wrapComponent("CoinSendTabNavigator")(function (_Component) {
        _inherits(CoinSendTabNavigator, _Component);

        function CoinSendTabNavigator() {
            var _ref;

            var _temp, _this, _ret;

            _classCallCheck(this, CoinSendTabNavigator);

            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = CoinSendTabNavigator.__proto__ || Object.getPrototypeOf(CoinSendTabNavigator)).call.apply(_ref, [this].concat(args))), _this), _this.navigateToHistory = function () {
                var navigateHistory = _reactNavigation.NavigationActions.navigate({
                    routeName: "coinHistory",
                    params: {
                        name: "Shubhnik"
                    }
                });

                _this.props.navigation.dispatch(navigateHistory);
            }, _this.navigateToContacts = function () {
                var navigateContacts = _reactNavigation.NavigationActions.navigate({
                    routeName: "contacts",
                    params: {
                        name: "Shubhnik"
                    }
                });

                _this.props.navigation.dispatch(navigateContacts);
            }, _this.navigateToAddContact = function () {
                var navigateAddContact = _reactNavigation.NavigationActions.navigate({
                    routeName: "addContact",
                    params: {
                        name: "Shubhnik"
                    }
                });

                _this.props.navigation.dispatch(navigateAddContact);
            }, _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(CoinSendTabNavigator, [{
            key: "render",
            value: function render() {
                return _react3.default.createElement(
                    _reactNative.View,
                    {
                        style: styles.tabHeader,
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 46
                        }
                    },
                    _react3.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: this.props.tab === 'contacts' ? styles.headerButtonOneActive : styles.headerButtonOne,
                            onPress: this.props.setContactTab,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 47
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.Text,
                            {
                                style: styles.headerContact,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 50
                                }
                            },
                            "Contacts"
                        )
                    ),
                    _react3.default.createElement(
                        _reactNative.TouchableOpacity,
                        {
                            style: this.props.tab === 'addcontact' ? styles.headerButtonTwoActive : styles.headerButtonTwo,
                            onPress: this.props.setAddContactTab,
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 52
                            }
                        },
                        _react3.default.createElement(
                            _reactNative.Text,
                            {
                                style: styles.headerAddContact,
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 55
                                }
                            },
                            "Add Contact"
                        )
                    )
                );
            }
        }]);

        return CoinSendTabNavigator;
    }(_react2.Component));

    var styles = _reactNative.StyleSheet.create({
        tabHeader: {
            flexDirection: 'row',
            width: '82%',
            justifyContent: 'center',
            borderBottomWidth: 1,
            borderBottomColor: '#b3b3b3',
            marginRight: '9%',
            marginLeft: '9%'
        },
        headerContact: {
            alignSelf: 'flex-start',
            fontSize: (0, _reactNativeResponsiveFontsize2.default)(2.8),
            fontFamily: "Cairo-Light",
            letterSpacing: 0.6
        },
        headerAddContact: {
            alignSelf: 'flex-end',
            fontSize: (0, _reactNativeResponsiveFontsize2.default)(2.8),
            fontFamily: "Cairo-Light",
            letterSpacing: 0.6
        },
        headerButtonOne: {
            width: '50%',
            padding: '2%'
        },
        headerButtonOneActive: {
            width: '50%',
            borderBottomWidth: 1,
            borderBottomColor: '#27c997',
            padding: '2%'
        },
        headerButtonTwo: {
            width: '50%',
            padding: '2%'
        },
        headerButtonTwoActive: {
            width: '50%',
            borderBottomWidth: 1,
            borderBottomColor: '#27c997',
            padding: '2%'
        }
    });

    exports.default = CoinSendTabNavigator;
});